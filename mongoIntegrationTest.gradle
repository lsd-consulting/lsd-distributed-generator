sourceSets {
    mongoIntegrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/mongoIntegrationTest/java')
        }
    }
}

configurations {
    mongoIntegrationTestImplementation.extendsFrom implementation
}

dependencies {
    // Spring
    mongoIntegrationTestImplementation("org.springframework.boot:spring-boot-starter-web")
    mongoIntegrationTestImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "junit", module: "junit"
        exclude group: "org.mockito", module: "mockito-core"
    }

    // Lsd
    mongoIntegrationTestImplementation 'io.github.lsd-consulting:lsd-distributed-mongodb-connector:6.1.20'

    // Db
    mongoIntegrationTestImplementation 'org.testcontainers:mongodb:1.21.3'
    mongoIntegrationTestImplementation 'org.testcontainers:junit-jupiter:1.21.3'

    // Other
    mongoIntegrationTestImplementation 'io.mockk:mockk-jvm:1.14.6'
    mongoIntegrationTestImplementation 'org.apache.commons:commons-lang3:3.19.0'
}

tasks.register('mongoIntegrationTest', Test) {
    useJUnitPlatform()
    dependsOn assemble

    testClassesDirs = sourceSets.mongoIntegrationTest.output.classesDirs
    classpath = sourceSets.mongoIntegrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true
    mustRunAfter(test)
}

check.dependsOn(mongoIntegrationTest)

mongoIntegrationTest {
    afterSuite { desc, result ->
        if (!desc.parent) {
            logger.lifecycle("Mongo integration test results: (${result.testCount} features, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)")
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}
